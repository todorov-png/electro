'use strict';

const header = document.querySelector(".header"),
      burgerMenu = header.querySelector(".menu-burger__header"),
      headerNav = header.querySelector(".header__nav"),
      headerItem = header.querySelectorAll(".header__item");

if (header !== null) {
  headerRendering();

  //При изменении ширины окна перерисовываем шапку
  window.addEventListener('resize', function(event){
    headerRendering();
  });
  
  burgerMenu.onclick = () => {
    burgerMenu.classList.toggle("open-menu");
    headerNav.classList.toggle("open-menu");
  };
}

//Меняем кнопки в шапке если есть авторизация пользователя
const userData = JSON.parse(localStorage.getItem('data_user'));

if(userData !== null) {
  updataUserData();
} else {
  //Скрываем корзину до авторизации
  const basketLink = header.querySelector(".header__item-basket");

  if(basketLink !== null) {
    basketLink.style.display="none";
  }
}

//При обновлении данных в localStorage обновляем шапки сайта
window.addEventListener('storage', () => {
  updataUserData();
  createTableBasket();
});

//Выравниваем эмблему по центру
function headerRendering() {
  if (header.offsetWidth > 960) {
    headerItem[0].style.width = headerItem[2].offsetWidth + 'px';
  } else {
    headerItem[0].style.width = 'auto';
  }
  headerNav.style.top = header.offsetHeight + 'px';
}

//Функция обновления данных если пользователь авторизовался
function updataUserData() {
  const accountLoginLink = header.querySelectorAll(".account-login"),
        registrationLink = header.querySelectorAll(".registration"),
        basketLink = header.querySelector(".header__item-basket"),
        basketData = JSON.parse(localStorage.getItem('data_basket')),
        counterBasketText = document.querySelector(".counter-basket-text");

  //Скрываем все кнопки входа
  if(accountLoginLink !== null) {
    accountLoginLink.forEach((elem)=>{
      elem.style.display="none";
    });
  }

  //Изменяем все кнопки регистрации на Мой аккаунт
  if(registrationLink !== null) {
    registrationLink.forEach((elem)=>{
      elem.textContent ="Мой аккаунт";
      elem.setAttribute("href", 'javascript:void(0);');
      elem.setAttribute("onclick", 'goToMyAccount();');
    });
  }

  //Проверяем есть ли что в корзине и обновляем счетчик
  if(basketData !== null && counterBasketText !== null) {
    //Считаем товары и изменяем счетчик корзины
    let i = 0;
    basketData.forEach(() => {
      i++;
    });
    counterBasketText.textContent = i;  
  }
}


function goToBasket() {
  const basketData = JSON.parse(localStorage.getItem('data_basket')),
        basketLink = document.querySelector(".header__item-basket");
  if(basketData !== null) {
    let i = 0;
    basketData.forEach(() => {
      i++;
    });
    if(i>0) {
      document.location.href = "http://electroshopkhai.zzz.com.ua/page/basket.html";
      basketLink.setAttribute("href", 'http://electroshopkhai.zzz.com.ua/page/basket.html');
    }
  } else {
    callPopUp('Ваша корзина пуста!');
  }
}
'use strict';

//Плавное исчезновение уведомления
function callPopUp(text) {
  const divPopUp = document.createElement( "div" ),
      blockText = document.createElement( "p" ),
      body = document.querySelector('body'),
      oldDivPopUp = document.querySelector('.pop-up-notification');

  if (oldDivPopUp !== null) {
    oldDivPopUp.remove();
  }
  
  divPopUp.classList.add('pop-up-notification');
  blockText.classList.add('pop-up-notification__text');
  blockText.textContent = text;
  blockText.zIndex = 100000;
  divPopUp.append(blockText);
  body.insertAdjacentElement('afterBegin', divPopUp);
  smoothTransparencyChange(divPopUp, 1500, 50);
}

function smoothTransparencyChange(block, timeStart, timeInterval) {
  let op = 1;
  setTimeout(()=>{
    setTimeout(function func() {
      if (op < 0) {
        block.remove();
        return;
      }
      block.style.opacity = op;
      op -= 0.05;
      setTimeout (func, timeInterval);
    }, timeInterval); 
  }, timeStart);
}
'use strict';

//Получение данных с формы регистрации без перезагрузки JS formData
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-reg-speed__form");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();
      const request = new XMLHttpRequest(),
            formData = new FormData(form);
      callPopUp('Проверяю данные, подождите!');
      request.open('POST', '../php/registration_form.php');
      request.send(formData);
      request.addEventListener('load', () => {
        if (request.status === 200) {
          if (JSON.parse(request.response)) {
            callPopUp('Регистрация прошла успешно!');
            form.reset();
            localStorage.setItem('data_user', request.response);
            setTimeout(function() {
              document.location.href = "http://electroshopkhai.zzz.com.ua/";
            }, 1000);
          } else {
            callPopUp('Пользователь с таким email уже зарегистрирован, перейдите на страницу входа!');
          }
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});
'use strict';
//Получение данных с формы регистрации без перезагрузки JS formData
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-authorization__form");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();
      const request = new XMLHttpRequest(),
            formData = new FormData(form);
      callPopUp('Проверяю данные, подождите!');
      request.open('POST', '../php/account_form.php');
      request.send(formData);
      request.addEventListener('load', () => {
        if (request.status === 200) {
          const answer = JSON.parse(request.response);
          if (answer) {
            if (answer.password_status) {
              callPopUp('Авторизация прошла успешно!');
              form.reset();
              localStorage.setItem('data_user', request.response);
              setTimeout(function() {
                document.location.href = "http://electroshopkhai.zzz.com.ua/";
              }, 1000); 
            } else {
              callPopUp('Введён неверный пароль!');
            }
          } else {
            callPopUp('Пользователь с таким email не найден!');
          }
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});
'use strict';

function lowerFooter() {
  const clientHeight = document.documentElement.clientHeight,
        footer = document.querySelector('footer'),
        wrapper = document.querySelector('body .wrapper');
        
  wrapper.style.minHeight = clientHeight - footer.offsetHeight + 'px';
}

lowerFooter();

//При изменении высоты окна прижимаем footer
window.addEventListener('resize', function(event) {
  lowerFooter();
});


'use strict';

class DescriptionMotherboard{
  constructor(parentSelector, name, id, price, src, direction, socket, bios, ramFormFactor, sound, powerPlug, formFactor, chipset, ramSlot, ramFrequency, plugs, processorPower, description){
    this.parent = document.querySelector(parentSelector);
    this.name = name;
    this.id = id;
    this.price = price;
    this.src = src;
    this.direction = direction;
    this.socket = socket;
    this.bios = bios;
    this.ramFormFactor = ramFormFactor;
    this.sound = sound;
    this.powerPlug = powerPlug;
    this.formFactor = formFactor;
    this.chipset = chipset;
    this.ramSlot = ramSlot;
    this.ramFrequency = ramFrequency;
    this.plugs = plugs;
    this.processorPower = processorPower;
    this.description = description;
  }
  render(){
    const element = document.createElement('section'),
          oldElement = document.querySelector('.product');

    if (oldElement) {
      oldElement.remove();
    }

    element.classList.add('product');

    element.innerHTML = `
    <h3 class="product__title">Материнская плата ${this.name}</h3>
    <nav class="product__nav">
        <ul class="product__menu">
            <li><a href="javascript:void(0);" onclick="renderElement('description', '${this.id}');" class="product-menu__item product-selected-menu">описание</a></li>
            <li><a href="javascript:void(0);" onclick="renderElement('characteristic', '${this.id}');" class="product-menu__item">характеристики</a></li>
            <li><a href="javascript:void(0);" onclick="renderElement('comment', '${this.id}');" class="product-menu__item">отзывы</a></li>
            <li><a href="javascript:void(0);" onclick="callPopUp('Раздел находится в разработке!');" class="product-menu__item">комплектующие</a></li>
            <li><a href="javascript:void(0);" onclick="addToBasketProduct('${this.name}', '${this.id}', ${this.price});" class="product-menu__item">купить</a></li>
            <li><a href="javascript:void(0);" onclick="comparisonProduct('${this.id}');" class="product-menu__item">${createTextBtnComparison(this.id)}</a></li>
        </ul>
    </nav>
    <div class="product-characteristics">
        <img class="product-characteristics__img" src="${this.src}" alt="">
        <ul class="product-characteristics__list">
            <li class="product-characteristics-list__item">По направлению: <span>${this.direction}</span></li>
            <li class="product-characteristics-list__item">Socket: <span>${this.socket}</span></li>
            <li class="product-characteristics-list__item">BIOS: <span>${this.bios}</span></li>
            <li class="product-characteristics-list__item">Форм-фактор ОЗУ: <span>${this.ramFormFactor}</span></li>
            <li class="product-characteristics-list__item">Звук (каналов): <span>${this.sound}</span></li>
            <li class="product-characteristics-list__item">Разъем питания: <span>${this.powerPlug}</span></li>
            <li class="product-characteristics-list__item">Форм-фактор: <span>${this.formFactor}</span></li>
            <li class="product-characteristics-list__item">Чипсет: <span>${this.chipset}</span></li>
            <li class="product-characteristics-list__item">Слоты ОЗУ: <span>${this.ramSlot}</span></li>
            <li class="product-characteristics-list__item">Тактовая частота ОЗУ: <span>${this.ramFrequency}</span></li>
            <li class="product-characteristics-list__item">Разъемы: <span>${this.plugs}</span></li>
            <li class="product-characteristics-list__item">Питание процессора: <span>${this.processorPower}</span></li>
        </ul>
    </div>
    <h4 class="product__description-title">описание:</h4>
    <p class="product__description-text">
      ${this.description}
    </p>
    `;
    this.parent.append(element);
  }
}



class CharacteristicMotherboard{
  constructor(parentSelector, name, id, price, socket, bios, ramFormFactor, sound, powerPlug, formFactor, chipset, ramSlot, ramFrequency, processorPower, size, slotsRAM, modeRAM, amountRAM, supportXMP, outputHDMI, outputDVI, audioChip, LAN, quantityLAN, controllerLAN, slotsPCIE1x, slotsPCIE16x, supportExpress, supportCrossFire, USB2, USB3, PS2, coolerPower){
    this.parent = document.querySelector(parentSelector);
    this.name = name;
    this.id = id;
    this.price = price;
    this.socket = socket;
    this.bios = bios;
    this.ramFormFactor = ramFormFactor;
    this.sound = sound;
    this.powerPlug = powerPlug;
    this.formFactor = formFactor;
    this.chipset = chipset;
    this.ramSlot = ramSlot;
    this.ramFrequency = ramFrequency;
    this.processorPower = processorPower;

    this.size = size;
    this.slotsRAM = slotsRAM;
    this.modeRAM = modeRAM;
    this.amountRAM = amountRAM;
    this.supportXMP = supportXMP;
    this.outputHDMI = outputHDMI;
    this.outputDVI = outputDVI;
    this.audioChip = audioChip;
    this.LAN = LAN;
    this.quantityLAN = quantityLAN;
    this.controllerLAN = controllerLAN;
    this.slotsPCIE1x = slotsPCIE1x;
    this.slotsPCIE16x = slotsPCIE16x;
    this.supportExpress = supportExpress;
    this.supportCrossFire = supportCrossFire;
    this.USB2 = USB2;
    this.USB3 = USB3;
    this.PS2 = PS2;
    this.coolerPower = coolerPower;
  }
  render(){
    const element = document.createElement('section'),
          oldElement = document.querySelector('.product');

    if (oldElement) {
      oldElement.remove();
    }

    element.classList.add('product');

    element.innerHTML = `
    <h3 class="product__title">Материнская плата ${this.name}</h3>
    <nav class="product__nav">
        <ul class="product__menu">
            <li><a href="javascript:void(0);" onclick="renderElement('description', '${this.id}');" class="product-menu__item">описание</a></li>
            <li><a href="javascript:void(0);" onclick="renderElement('characteristic', '${this.id}');" class="product-menu__item product-selected-menu">характеристики</a></li>
            <li><a href="javascript:void(0);" onclick="renderElement('comment', '${this.id}');" class="product-menu__item">отзывы</a></li>
            <li><a href="javascript:void(0);" onclick="callPopUp('Раздел находится в разработке!');" class="product-menu__item">комплектующие</a></li>
            <li><a href="javascript:void(0);" onclick="addToBasketProduct('${this.name}', '${this.id}', ${this.price});" class="product-menu__item">купить</a></li>
            <li><a href="javascript:void(0);" onclick="comparisonProduct('${this.id}');" class="product-menu__item">${createTextBtnComparison(this.id)}</a></li>
        </ul>
    </nav>
    <div class="product__characteristic">
                <table>
                    <tbody>
                        <tr>
                            <th>Основное</th>
                        </tr>
                        <tr>
                            <td>Socket</td>
                            <td>${this.socket}</td>
                        </tr>
                        <tr>
                            <td>Форм-фактор</td>
                            <td>${this.formFactor}</td>
                        </tr>
                        <tr>
                            <td>Размеры (ВхШ)</td>
                            <td>${this.size}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Чипсет</th>
                        </tr>
                        <tr>
                            <td>Чипсет</td>
                            <td>${this.chipset}</td>
                        </tr>
                        <tr>
                            <td>BIOS</td>
                            <td>${this.bios}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Оперативная память</th>
                        </tr>
                        <tr>
                            <td>DDR4</td>
                            <td>${this.slotsRAM}</td>
                        </tr>
                        <tr>
                            <td>Форм-фактор слота для памяти</td>
                            <td>${this.ramFormFactor}</td>
                        </tr>
                        <tr>
                            <td>Режим работы</td>
                            <td>${this.modeRAM}</td>
                        </tr>
                        <tr>
                            <td>Максимальная тактовая частота</td>
                            <td>${this.ramFrequency}</td>
                        </tr>
                        <tr>
                            <td>Максимальный объем памяти</td>
                            <td>${this.amountRAM}</td>
                        </tr>
                        <tr>
                            <td>Поддержка XMP</td>
                            <td>${this.supportXMP}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Видеовыходы</th>
                        </tr>
                        <tr>
                            <td>Выход HDMI</td>
                            <td>${this.outputHDMI}</td>
                        </tr>
                        <tr>
                            <td>Выход DVI</td>
                            <td>${this.outputDVI}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Интегрированное аудио</th>
                        </tr>
                        <tr>
                            <td>Аудиочип</td>
                            <td>${this.audioChip}</td>
                        </tr>
                        <tr>
                            <td>Звук (каналов)</td>
                            <td>${this.sound}</td>
                        </tr>
                    </tbody>
                </table>
                <table>
                    <tbody>
                        <tr>
                            <th>Сетевые интерфейсы</th>
                        </tr>
                        <tr>
                            <td>LAN (RJ-45)</td>
                            <td>${this.LAN}</td>
                        </tr>
                        <tr>
                            <td>Кол-во LAN-портов</td>
                            <td>${this.quantityLAN}</td>
                        </tr>
                        <tr>
                            <td>LAN контроллер</td>
                            <td>${this.controllerLAN}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Слоты плат расширения</th>
                        </tr>
                        <tr>
                            <td>Слотов PCI-E 1x</td>
                            <td>${this.slotsPCIE1x}</td>
                        </tr>
                        <tr>
                            <td>Слотов PCI-E 16x</td>
                            <td>${this.slotsPCIE16x}</td>
                        </tr>
                        <tr>
                            <td>Поддержка PCI Express</td>
                            <td>${this.supportExpress}</td>
                        </tr>
                        <tr>
                            <td>Поддержка CrossFire (AMD)</td>
                            <td>${this.supportCrossFire}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Разъемы на задней панели</th>
                        </tr>
                        <tr>
                            <td>USB 2.0</td>
                            <td>${this.USB2}</td>
                        </tr>
                        <tr>
                            <td>USB 3.2</td>
                            <td>${this.USB3}</td>
                        </tr>
                        <tr>
                            <td>PS/2</td>
                            <td>${this.PS2}</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <th>Разъемы питания</th>
                        </tr>
                        <tr>
                            <td>Основной разъем питания</td>
                            <td>${this.powerPlug}</td>
                        </tr>
                        <tr>
                            <td>Питание процессора</td>
                            <td>${this.processorPower}</td>
                        </tr>
                        <tr>
                            <td>Разъемов питания кулеров</td>
                            <td>${this.coolerPower}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
    `;
    this.parent.append(element);
  }
}


class CommentPage{
  constructor(parentSelector, name, id, price, dataComment){
      this.parent = document.querySelector(parentSelector);
      this.name = name;
      this.id = id;
      this.price = price;
      this.dataComment = dataComment;
    }
    render(){
      const element = document.createElement('section'),
            oldElement = document.querySelector('.product');
      
      if (oldElement) {
        oldElement.remove();
      }
  
      element.classList.add('product');

      let nameProduct, menuHTML, commentListHTML = '';

      if (this.id.slice(0, 2) === 'mb') {
        menuHTML = `<h3 class="product__title">Материнская плата ${this.name}</h3>
          <nav class="product__nav">
              <ul class="product__menu">
                  <li><a href="javascript:void(0);" onclick="renderElement('description', '${this.id}');" class="product-menu__item">описание</a></li>
                  <li><a href="javascript:void(0);" onclick="renderElement('characteristic', '${this.id}');" class="product-menu__item">характеристики</a></li>
                  <li><a href="javascript:void(0);" onclick="renderElement('comment', '${this.id}');" class="product-menu__item product-selected-menu">отзывы</a></li>
                  <li><a href="javascript:void(0);" onclick="callPopUp('Раздел находится в разработке!');" class="product-menu__item">комплектующие</a></li>
                  <li><a href="javascript:void(0);" onclick="addToBasketProduct('${this.name}', '${this.id}', ${this.price});" class="product-menu__item">купить</a></li>
                  <li><a href="javascript:void(0);" onclick="comparisonProduct('${this.id}');" class="product-menu__item">${createTextBtnComparison(this.id)}</a></li>
              </ul>
          </nav>`;
      } else {
        switch (this.id.slice(0, 2)) {
          case 'cp': 
            nameProduct = 'Процессор';
          break;
          case 'gc': 
            nameProduct = 'Видеокарта';
          break;
          case 'rm': 
            nameProduct = 'Оперативная память';
          break;
        }
        menuHTML = `<h3 class="product__title">${nameProduct} ${this.name}</h3>
          <nav class="product__nav">
              <ul class="product__menu">
                  <li><a href="javascript:void(0);" onclick="renderElement('description', '${this.id}');" class="product-menu__item">описание</a></li>
                  <li><a href="javascript:void(0);" onclick="renderElement('comment', '${this.id}');" class="product-menu__item product-selected-menu">отзывы</a></li>
                  <li><a href="javascript:void(0);" onclick="callPopUp('Раздел находится в разработке!');" class="product-menu__item">комплектующие</a></li>
                  <li><a href="javascript:void(0);" onclick="addToBasketProduct('${this.name}', '${this.id}', ${this.price});" class="product-menu__item">купить</a></li>
                  <li><a href="javascript:void(0);" onclick="comparisonProduct('${this.id}');" class="product-menu__item">${createTextBtnComparison(this.id)}</a></li>
              </ul>
          </nav>`;
      }


      if (this.dataComment.length > 0) {
        this.dataComment.forEach(comment => {
          commentListHTML += `
            <div class="product__comments__item">
                <span>${comment.username}</span>
                <p>${comment.textcomment}</p>
                <time>${comment.time}</time>
            </div>
          `;
        });
      } else {
        commentListHTML = `<h4 class="product__comments__title">Отзывов не обнаружено, вы можете оставить первый отзыв😉</h4>`;
      }
  
      element.innerHTML = menuHTML + `<div class="product__comments">` + commentListHTML + ` 
            <form class="product__comments__form" data-id-product='${this.id}'>
                <h4>Оставить отзыв:</h4>
                <div class="product__comments__form-row">
                    <input type="text" name="username" tabindex="1" placeholder="Ваше имя или email" required>
                </div>
                <div class="product__comments__form-row">
                    <textarea rows="7" name="textcomment" tabindex="2" placeholder="Ваш отзыв" required 
                    maxlength="1000"></textarea>
                </div>
                <div class="product__comments__form-row">
                    <button class="product__comments__form-conteiner-btn">Отправить отзыв</button>
                </div>
            </form>
            </div>`;
    this.parent.append(element);
    addCommentProduct();
  }
}



/* document.addEventListener('DOMContentLoaded', ()=>{


}); */

async function renderElement(menu, idProduct) {
  const data = await getDataBD('../php/get_product.php', JSON.stringify({ 'id': idProduct })),
        dataProduct = JSON.parse(data.dataproduct),
        dataComment = JSON.parse(data.comment);
  console.log(idProduct);
  console.log('dataProduct', dataProduct);
  console.log('dataComment', dataComment);

  if (menu === 'comment') {
    const {parentSelector, name, id, price} = dataProduct;

    new CommentPage(parentSelector, name, id, price, dataComment).render(); 
  } else {
    switch (idProduct.slice(0, 2)) {
      case 'mb': 
        const {parentSelector, name, id, price, src, direction, socket, bios, ramFormFactor, sound, powerPlug, formFactor, chipset, ramSlot, ramFrequency, plugs, processorPower, description, size, slotsRAM, modeRAM, amountRAM, supportXMP, outputHDMI, outputDVI, audioChip, LAN, quantityLAN, controllerLAN, slotsPCIE1x, slotsPCIE16x, supportExpress, supportCrossFire, USB2, USB3, PS2, coolerPower} = dataProduct;

        if (menu === 'description') {
          console.log('description');
          new DescriptionMotherboard(parentSelector, name, id, price, src, direction, socket, bios, ramFormFactor, sound, powerPlug, formFactor, chipset, ramSlot, ramFrequency, plugs, processorPower, description).render(); 
        } else if (menu === 'characteristic') {
          console.log('characteristic');
          new CharacteristicMotherboard(parentSelector, name, id, price, socket, bios, ramFormFactor, sound, powerPlug, formFactor, chipset, ramSlot, ramFrequency, processorPower, size, slotsRAM, modeRAM, amountRAM, supportXMP, outputHDMI, outputDVI, audioChip, LAN, quantityLAN, controllerLAN, slotsPCIE1x, slotsPCIE16x, supportExpress, supportCrossFire, USB2, USB3, PS2, coolerPower).render();
        }
      break;
    };
  }
}



function comparisonProduct(id) {
  let dataStorage = JSON.parse(localStorage.getItem('data_comparison')),
      clickElement = document.querySelectorAll('.product-menu__item');

  if (dataStorage === null || dataStorage.length === 0) {
    dataStorage = [];
    dataStorage.push(id);
    clickElement[clickElement.length-1].innerText = 'удалить из сравнения';
  } else {
    const index = dataStorage.indexOf(id);
      if (index > -1) {
        dataStorage.splice(index, 1);
        clickElement[clickElement.length-1].innerText = 'добавить к сравнению';
      } else {
        dataStorage.push(id);
        clickElement[clickElement.length-1].innerText = 'удалить из сравнения';
      }
  }
  localStorage.setItem('data_comparison', JSON.stringify(dataStorage));
}



function createTextBtnComparison(id) {
  let dataStorage = JSON.parse(localStorage.getItem('data_comparison'));

  if (dataStorage === null || dataStorage.length === 0) {
    return 'добавить к сравнению';
  } else {
    const index = dataStorage.indexOf(id);
    if (index > -1) {
      return 'удалить из сравнения';
    } else {
      return 'добавить к сравнению';
    }
  } 
}



function addCommentProduct() {
  const form = document.querySelector('.product__comments__form');
       
  if (form) {
      try {
        let dataStorage = JSON.parse(localStorage.getItem('data_user'));

        if (dataStorage !== null) {
            document.querySelector('.product__comments__form-row input').value  = `${dataStorage.email}`;
        }
      } catch {
        console.log('Зачем очистили данные авторизации???');
      }
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form),
            data = Object.fromEntries(formData.entries()),
            idProduct = form.getAttribute('data-id-product');

      data.time = getNewDate();
      data.id = idProduct;
    
      const answer = await getDataBD('../php/add_comment_product.php', JSON.stringify(data));

      if (answer) {
        form.reset();
        callPopUp('Спасибо за отзыв!');
        renderElement('comment', idProduct);
      } else {
        callPopUp('Произошла ошибка, попробуйте еще!');
      }
    });
  }
}

//addCommentProduct();


//console.log(JSON.stringify([{username: "zhenya_todorov", textcomment: "rtetete", time: "12 июня 2021 г.", id: "mb001"}, {username: "zhenya_todorov", textcomment: "rtetete", time: "12 июня 2021 г.", id: "mb001"}]));
'use strict';

createTableBasket();

function deleteProduct(idRow) {
  const table = document.querySelector(".table-product"),
        row = table.querySelector(`[data-id="${idRow}"]`),
        basket = JSON.parse(localStorage.getItem('data_basket'));

  row.remove();
  if(basket.length !== 1) {
    const filteredBasket = basket.filter((item) => item.id !== idRow);
    costBasket(filteredBasket);
    localStorage.setItem('data_basket', JSON.stringify(filteredBasket));
  } else {
    //Если удалены все позиции, то изменяем заголовок и удаляем таблицу и форму
    clearBasket();
  }
}


function plusProductCounter(idRow) {
  const table = document.querySelector(".table-product"),
        basket = JSON.parse(localStorage.getItem('data_basket')),
        row = table.querySelector(`[data-id="${idRow}"]`),
        price = row.querySelector(".table-product__row-price"),
        amount = row.querySelector(".table-product__row-amount").querySelector("span"),
        sum = row.querySelector(".table-product__row-sum"),
        priceValue = parseInt(price.innerText);
      
  let amountValue = parseInt(amount.innerText);

  amountValue++;
  if(amountValue > 19) {
    amountValue = 20;
    callPopUp('Максимальное количество товара 20!');
  }
  amount.innerText = String(amountValue);
  sum.innerText = String(amountValue * priceValue);

  basket.forEach(product => {
    if(product.id === idRow) {
      product.counter = amountValue;
      product.sum = amountValue*priceValue;
    }
  });

  costBasket(basket);
  localStorage.setItem('data_basket', JSON.stringify(basket));
}


function minusProductCounter(idRow) {
  const table = document.querySelector(".table-product"),
        basket = JSON.parse(localStorage.getItem('data_basket')),
        row = table.querySelector(`[data-id="${idRow}"]`),
        price = row.querySelector(".table-product__row-price"),
        amount = row.querySelector(".table-product__row-amount").querySelector("span"),
        sum = row.querySelector(".table-product__row-sum"),
        priceValue = parseInt(price.innerText);
      
  let amountValue = parseInt(amount.innerText);

  amountValue--;
  if(amountValue < 1) {
    amountValue = 1;
    callPopUp('Минимальное количество товара 1!');
  }
  amount.innerText = String(amountValue);
  sum.innerText = String(amountValue * priceValue);

  basket.forEach(product => {
    if(product.id === idRow) {
      product.counter = amountValue;
      product.sum = amountValue*priceValue;
    }
  });

  costBasket(basket);
  localStorage.setItem('data_basket', JSON.stringify(basket));
}


function createTableBasket() {
  const basketBlock = document.querySelector(".basket"),
        basketData = JSON.parse(localStorage.getItem('data_basket'));
        

  if(basketBlock !== null && basketData !== null && basketData.length > 0) {

    let table = document.querySelector(".table-product"),
        form = document.querySelector(".form-product"),
        tableTextHTML = ` <tr class="table-product__row">
                            <th>Товар</th>
                            <th>Цена</th>
                            <th>Количество</th>
                            <th>Сумма</th>
                          </tr>`,
        formTextHTML = `<p class="form-product__text">
                          Сумма заказа: 
                          <span class="form-product__sum"></span>&nbsp;грн.
                        </p>
                        <button>Заказать</button>`;

    basketData.forEach((product) => {
      tableTextHTML += ` <tr class="table-product__row" data-id="${product.id}">
                      <td class="table-product__row-name">${product.name}</td>
                      <td class="table-product__row-price">${product.price}</td>
                      <td class="table-product__row-amount-wraper">
                        <div class="table-product__row-amount">
                          <a href="javascript:void(0);" onclick="minusProductCounter('${product.id}');"><i class="far fa-minus-square"></i></a>
                          <span>${product.counter}</span>
                          <a href="javascript:void(0);" onclick="plusProductCounter('${product.id}');"><i class="far fa-plus-square"></i></a>
                        </div>
                        </td>
                      <td class="table-product__row-sum">${product.sum}</td>
                      <td class="table-product__row-close">
                        <a href="javascript:void(0);" onclick="deleteProduct('${product.id}');"><i class="fas fa-times"></i></a>
                      </td>
                    </tr>`;
    });

    if (table === null) {
      table = document.createElement("table");
    }
    if(form === null) {
      form = document.createElement("form");
    }

    table.classList.add('table-product');
    form.classList.add('form-product');
    table.innerHTML = tableTextHTML;
    form.innerHTML = formTextHTML;
    basketBlock.append(table);
    basketBlock.append(form);
    document.querySelector(".basket__heading-text").innerText = 'Корзина';
    costBasket(basketData);
  } else if(document.querySelector(".basket__heading-text") !== null){
    document.querySelector(".basket__heading-text").innerText = 'Корзина пуста';
  }
}


function costBasket(data) {
  const sumBlock = document.querySelector(".form-product__sum");
  let sum = 0;

  data.forEach(product => {
    sum += product.sum;
  });

  if(sumBlock !== null) {
    sumBlock.innerText = String(sum);
  }
}

function clearBasket() {
  const table = document.querySelector(".table-product"),
        form = document.querySelector(".form-product");

  if (form !== null && table !== null) {
    table.remove();
    form.remove();
    localStorage.removeItem('data_basket');
    document.querySelector(".basket__heading-text").innerText = 'Корзина пуста';
    callPopUp('Корзина пуста!');
  }
}


//Получение данных с формы регистрации без перезагрузки JS JSON
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-product");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();

      let data = {},
        details = `[`;

      const basketData = JSON.parse(localStorage.getItem('data_basket')),
            userData = JSON.parse(localStorage.getItem('data_user')),
            request = new XMLHttpRequest();

      if(userData !== null && basketData !== null) {

        basketData.forEach((product) => {
          details += `{"id":"${product.id}","name":"${product.name}","price":"${product.price}","counter":"${product.counter}"},`;
        });

        details = details.substring(0, details.length-1)+']';
        data.email = userData.email;
        data.details = JSON.parse(details);
      }

      request.open('POST', '../php/basket.php');
      request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
      request.send(JSON.stringify(data));
      request.addEventListener('load', () => {
        if (request.status === 200) {
          clearBasket();
          callPopUp('Заказ принят, ожидайте, мы с вами свяжемся!');
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});


function addToBasketProduct(nameProduct, dataID, price) {
  const user = JSON.parse(localStorage.getItem('data_user')),
            counterBasketText = document.querySelector(".counter-basket-text");

  if(user !== null) {
    let basket = JSON.parse(localStorage.getItem('data_basket'));

    if(basket === null) {
      //Если корзина пуста, то сохраняем данные
      basket = [{
          id: dataID,
          name: nameProduct,
          price: price,
          counter: 1,
          sum: price
      }];
      localStorage.setItem('data_basket', JSON.stringify(basket));
      counterBasketText.textContent = parseInt(counterBasketText.textContent) + 1;
      callPopUp('Товар добавлен в корзину!');
    } else {
      let i = 0;
      basket.forEach(obj => {
        if(obj.id === dataID) {
          i++;
        }
      });
      
      if(i === 0) {
        basket.push({
          id: dataID,
          name: nameProduct,
          price: price,
          counter: 1,
          sum: price
        });
        localStorage.setItem('data_basket', JSON.stringify(basket));
        counterBasketText.textContent = parseInt(counterBasketText.textContent) + 1;
        callPopUp('Товар добавлен в корзину!');
      } else {
        callPopUp('Вы уже добавили этот товар в корзину!');
      }
    }
  } else {
    callPopUp('Для добавления в корзину необходимо авторизоваться!');
  }
}
'use strict';

async function getDataBD(url, data) {
  const res = await fetch(url, {
    method: "POST",
    body: data,
    headers: {
      'Content-Type': 'application/json;charset=utf-8'
    }
  });
  return await res.json();
};

function formToJSON(form) {
  const formData = new FormData(form),
        json = JSON.stringify(Object.fromEntries(formData.entries()));

  return json;
}

function getNewDate() {
  const date = new Date(),
        options = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          timezone: 'UTC'
        };

return date.toLocaleString("ru", options);
}
'use strict';

createTableHistory();


function goToMyAccount(){
  const dataUser = JSON.parse(localStorage.getItem('data_user')),
        request = new XMLHttpRequest();

  if(dataUser !== null) {

    request.open('POST', '../php/history_of_orders.php');
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    request.send(JSON.stringify(dataUser.email));
    request.addEventListener('load', () => {

      if (request.status === 200) {
        const answer = JSON.parse(request.response);

        if(answer) {
          localStorage.setItem('data_history_of_orders', JSON.stringify(answer));
        }
        document.location.href = "http://electroshopkhai.zzz.com.ua/page/my_account.html";
      } else {
        callPopUp('Произошла ошибка, попробуйте позже!');
      }
    });
  } else {
    callPopUp('Авторизуйтесь для просмотра аккаунта!');
  }
}


function signOut() {
  localStorage.clear();
  document.location.href = "http://electroshopkhai.zzz.com.ua";
}


function createTableHistory() {
  const historyBlock = document.querySelector(".account"),
        historyData = JSON.parse(localStorage.getItem('data_history_of_orders'));
        

  if(historyBlock !== null && historyData !== null && historyData.length > 0) {
    //Удаляем все таблицы, которые были созданы до этого
    const tableOld = document.querySelectorAll(".table-history-orders");

    if(tableOld !==null) {
      tableOld.forEach((elem) => {
        elem.remove();
      });
    }

    //Изменяем заголовок если есть заказы
    document.querySelector(".account__heading-text").innerText = 'История заказов';

    //Перебирать заказы и каждый заказ создавать отдельную таблицу с обводкой
    historyData.forEach((order) => {
      const table = document.createElement("table");
      let sum = 0,
          tableTextHTML =  `<thead>
                              <tr>
                              <td class="table-history-orders__header">Заказ №${order[0]}</td>
                              </tr>
                            </thead>
                            <tr class="table-history-orders__row">
                              <th>Товар</th>
                              <th>Цена</th>
                              <th>Количество</th>
                            </tr>`;

      order[1].forEach((product) => {
        sum += product.price * product.counter;
        tableTextHTML += `<tr class="table-history-orders__row" data-id="${product.id}">
                            <td class="table-history-orders__row-name">${product.name}</td>
                            <td class="table-history-orders__row-price">${product.price}</td>
                            <td class="table-history-orders__row-amount">${product.counter}</td>
                          </tr>`;
      });

      tableTextHTML += `<tr class="table-history-orders__row">
                          <td class="table-history-orders__row-sum">Сумма заказа: ${sum} грн.</td>
                        </tr>`;

      table.classList.add('table-history-orders');
      table.innerHTML = tableTextHTML;
      historyBlock.append(table);
    });

  } else if(document.querySelector(".account__heading-text") !== null){
    document.querySelector(".account__heading-text").innerText = 'История заказов пуста';
  }
}